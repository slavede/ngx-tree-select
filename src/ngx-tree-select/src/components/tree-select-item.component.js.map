{"version":3,"sources":["../../../../../src/ngx-tree-select/src/components/tree-select-item.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EAET,KAAK,EAEJ,MAAM,eAAA,CAAgB;AACzB,OAAO,EAAE,cAAA,EAAe,MAAO,2BAAA,CAA4B;AAC3D,OAAO,EAAE,aAAA,EAAc,MAAO,4BAAA,CAA6B;AAO3D;IAUE,iCACU,GAAkB;QAAlB,QAAG,GAAH,GAAG,CAAe;IACxB,CAAC;IAXL,sBAAW,2CAAM;aAAjB;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAC1B,CAAC;;;OAAA;IAWM,4CAAU,GAAjB,UAAkB,MAAW;QAC3B,MAAM,CAAC,eAAe,EAAE,CAAC;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;IAED,sBAAI,yDAAoB;aAAxB;YACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,oBAAoB,CAAC;QACrD,CAAC;;;OAAA;IAED,sBAAI,iDAAY;aAAhB;YACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC;QACtF,CAAC;;;OAAA;IAED,sBAAW,iDAAY;aAAvB;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1E,CAAC;;;OAAA;IAEM,wCAAM,GAAb,UAAc,MAAW;QACvB,MAAM,CAAC,eAAe,EAAE,CAAC;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa;YACpC,CAAC,IAAI,CAAC,YAAY;YAClB,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC;QACD,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,sBAAW,2CAAM;aAAjB;YACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC;QACvC,CAAC;;;OAAA;IA1CQ;QAAR,KAAK,EAAE;;sEAAsC;IAG9C;QADC,KAAK,EAAE;kCACK,cAAc;yDAAC;IARjB,uBAAuB;QALnC,SAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;YAC5B,WAAW,EAAE,mCAAmC;YAChD,SAAS,EAAE,CAAC,mCAAmC,CAAC;SACjD,CAAC;yCAYe,aAAa;OAXjB,uBAAuB,CAgDnC;IAAD,8BAAC;CAhDD,AAgDC,IAAA;SAhDY,uBAAuB","file":"tree-select-item.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  Output\n  } from '@angular/core';\nimport { SelectableItem } from '../models/selectable-item';\nimport { SelectService } from '../services/select.service';\n\n@Component({\n  selector: 'tree-select-item',\n  templateUrl: './tree-select-item.component.html',\n  styleUrls: ['./tree-select-item.component.scss']\n})\nexport class TreeSelectItemComponent {\n  public get isOpen() {\n    return this.item.isOpen;\n  }\n\n  @Input() public onTouchedCallBack: () => void;\n\n  @Input()\n  public item: SelectableItem;\n\n  public constructor(\n    private svc: SelectService\n  ) { }\n\n  public toggleOpen($event: any) {\n    $event.stopPropagation();\n    if (this.haveChildren) {\n      this.item.isOpen = !this.item.isOpen;\n    } else {\n      this.select($event);\n    }\n  }\n\n  get allowParentSelection(): boolean {\n    return this.svc.Configuration.allowParentSelection;\n  }\n\n  get needCheckBox(): boolean {\n    return this.svc.Configuration.isHierarchy() && this.svc.Configuration.allowMultiple;\n  }\n\n  public get haveChildren(): boolean {\n    return this.item && this.item.children && this.item.children.length > 0;\n  }\n\n  public select($event: any): void {\n    $event.stopPropagation();\n    if (this.svc.Configuration.allowMultiple ||\n        !this.haveChildren ||\n        this.svc.Configuration.allowParentSelection) {\n      this.svc.toggleItemSelection(this.item);\n    }\n    this.onTouchedCallBack();\n  }\n\n  public get filter(): string {\n    return this.svc.Configuration.filter;\n  }\n}\n"]}